// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3vPCjWZHeaN7EGwdXjxrwK
// Component: y8bNpI6JvHh_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsldLl3NzsIg50 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: LdLL3NZSIg50/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_nano_wallet.module.css"; // plasmic-import: 3vPCjWZHeaN7EGwdXjxrwK/projectcss
import sty from "./PlasmicCtaBanner.module.css"; // plasmic-import: y8bNpI6JvHh_/css

createPlasmicElementProxy;

export type PlasmicCtaBanner__VariantMembers = {};
export type PlasmicCtaBanner__VariantsArgs = {};
type VariantPropType = keyof PlasmicCtaBanner__VariantsArgs;
export const PlasmicCtaBanner__VariantProps = new Array<VariantPropType>();

export type PlasmicCtaBanner__ArgsType = {};
type ArgPropType = keyof PlasmicCtaBanner__ArgsType;
export const PlasmicCtaBanner__ArgProps = new Array<ArgPropType>();

export type PlasmicCtaBanner__OverridesType = {
  sectionBanner?: p.Flex<"section">;
  h3?: p.Flex<"h3">;
  text?: p.Flex<"div">;
};

export interface DefaultCtaBannerProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCtaBanner__RenderFunc(props: {
  variants: PlasmicCtaBanner__VariantsArgs;
  args: PlasmicCtaBanner__ArgsType;
  overrides: PlasmicCtaBanner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsldLl3NzsIg50()
  });

  return (
    <section
      data-plasmic-name={"sectionBanner"}
      data-plasmic-override={overrides.sectionBanner}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.sectionBanner
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wrxLp)}>
        <div className={classNames(projectcss.all, sty.freeBox__ahSp1)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7Gf7U)}
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {"Start your crypto journey \nwith Nano Wallet now"}
            </h3>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Empower Your Crypto Journey with Seamless Experience"}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zFHkp)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___6O1Bm
                )}
                component={Link}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__p0S1F)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"180px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/nano_wallet/images/googleplaypng.png",
                    fullWidth: 182,
                    fullHeight: 55,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__jVqKv
                )}
                component={Link}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qSxne)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"180px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/nano_wallet/images/appstorepng.png",
                    fullWidth: 177,
                    fullHeight: 53,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            </p.Stack>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox__z8QbF)} />
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sectionBanner: ["sectionBanner", "h3", "text"],
  h3: ["h3"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  sectionBanner: "section";
  h3: "h3";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCtaBanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCtaBanner__VariantsArgs;
    args?: PlasmicCtaBanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCtaBanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCtaBanner__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCtaBanner__ArgProps,
          internalVariantPropNames: PlasmicCtaBanner__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCtaBanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sectionBanner") {
    func.displayName = "PlasmicCtaBanner";
  } else {
    func.displayName = `PlasmicCtaBanner.${nodeName}`;
  }
  return func;
}

export const PlasmicCtaBanner = Object.assign(
  // Top-level PlasmicCtaBanner renders the root element
  makeNodeComponent("sectionBanner"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCtaBanner
    internalVariantProps: PlasmicCtaBanner__VariantProps,
    internalArgProps: PlasmicCtaBanner__ArgProps
  }
);

export default PlasmicCtaBanner;
/* prettier-ignore-end */
