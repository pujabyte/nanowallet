// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3vPCjWZHeaN7EGwdXjxrwK
// Component: X8doCF8FU8Qf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarNano from "../../NavBarNano"; // plasmic-import: pZFcNhZ0aZ-r/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import CtaBanner from "../../CtaBanner"; // plasmic-import: y8bNpI6JvHh_/component
import Footer from "../../Footer"; // plasmic-import: JQoViTbLhAVV/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_nano_wallet.module.css"; // plasmic-import: 3vPCjWZHeaN7EGwdXjxrwK/projectcss
import sty from "./PlasmicHelp.module.css"; // plasmic-import: X8doCF8FU8Qf/css

createPlasmicElementProxy;

export type PlasmicHelp__VariantMembers = {};
export type PlasmicHelp__VariantsArgs = {};
type VariantPropType = keyof PlasmicHelp__VariantsArgs;
export const PlasmicHelp__VariantProps = new Array<VariantPropType>();

export type PlasmicHelp__ArgsType = {};
type ArgPropType = keyof PlasmicHelp__ArgsType;
export const PlasmicHelp__ArgProps = new Array<ArgPropType>();

export type PlasmicHelp__OverridesType = {
  root?: p.Flex<"div">;
  navBarNano?: p.Flex<typeof NavBarNano>;
  sectionPrivatekey?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  dataProvider?: p.Flex<typeof DataProvider>;
  collapse?: p.Flex<typeof AntdSingleCollapse>;
  embedHtml?: p.Flex<typeof Embed>;
  ctaBanner?: p.Flex<typeof CtaBanner>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHelpProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHelp__RenderFunc(props: {
  variants: PlasmicHelp__VariantsArgs;
  args: PlasmicHelp__ArgsType;
  overrides: PlasmicHelp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse[].open",
        type: "private",
        variableType: "boolean",

        onMutate: p.generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavBarNano
            data-plasmic-name={"navBarNano"}
            data-plasmic-override={overrides.navBarNano}
            className={classNames("__wab_instance", sty.navBarNano)}
          />

          <section
            data-plasmic-name={"sectionPrivatekey"}
            data-plasmic-override={overrides.sectionPrivatekey}
            className={classNames(projectcss.all, sty.sectionPrivatekey)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hnsef)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Help"}
              </h1>
              <DataProvider
                data-plasmic-name={"dataProvider"}
                data-plasmic-override={overrides.dataProvider}
                className={classNames("__wab_instance", sty.dataProvider)}
                data={[
                  {
                    Title: "How to create Wallet",
                    Description:
                      '<p><meta charset="utf-8"><ol><li>Install and Set Up Nano Wallet</li><li>Create a New Wallet<ul><li>Click "Create a Wallet" to start creating a new wallet.</li></ul></li><li>Backup Your Secret Recovery Phrase:**<ul><li>You\'ll be presented with a secret recovery phrase, also known as a seed phrase. This is a crucial backup that allows you to recover your wallet if you forget your PIN or lose access.</li><li>Carefully write down the 12 or 24 words in the exact order they are shown. Store this phrase securely, preferably offline, and do not share it with anyone.</li></ul></li><li>Confirm Your Secret Recovery Phrase:**<ul><li>Nanowallet will ask you to confirm your recovery phrase by selecting the words in the correct order. This step ensures you\'ve written down your phrase accurately.</li></ul></li><li>Set a Strong PIN<ul><li>Create a strong PIN for your wallet. This password will be used to unlock your Nano Wallet</li></ul></li></ol><p><strong>Important Security Tips :</strong></p><ul><li>Never share your secret recovery phrase with anyone. Treat it like the key to your wallet.</li><li>Regularly back up your wallet and store your recovery phrase in a secure location.</li><li>Be cautious of phishing websites or scams that may attempt to steal your wallet information.</li></ul><p><br>Remember that cryptocurrencies are valuable assets, so maintaining the security of your wallet is essential.</p><br></p>'
                  },
                  {
                    Title: "How to import wallet?",
                    Description:
                      '<p><p class="" style=""><p class="" style=""><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;">&nbsp;</div><ol><li>Open Nano Wallet application<br><ul><li>Launch the wallet application. In Nano Wallet, click on the extension icon or open the mobile app.<br></li></ul></li><li>Choose Import Wallet option<br><ul><li>You\'ll see the option to either "Create a New Wallet" or "I already have a wallet." Click on "I Already have a wallet" to proceed.<br></li></ul></li><li>Input the Private Key or Recovery Phrase:**<br><ul><li>If you have a private key for your existing wallet, paste it into the designated field. The private key is a long string of characters.<br></li><li>If you have a recovery phrase, enter the recovery phrase in the correct order. Recovery phrases usually consist of 12 or 24 words.<br></li></ul></li><li>Set a new PIN<br><ul><li>Create a strong PIN for your wallet. This password will be used to unlock your Nano Wallet<br></li></ul></li><li>Access Your Imported Wallet<br><ul><li>Once the wallet is imported successfully, you\'ll have access to the wallet\'s balances and transaction history within the wallet application. </li></ul></li></ol><div data-cke-filler-webkit="end" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;">&nbsp;</div><br></p></p></p><p class="" style=""><br></p>'
                  },
                  {
                    Title: "How to send your token?",
                    Description:
                      '<p><p class="" style=""><p class="" style=""><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;"></div></p></p></p><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;">&nbsp;</div><ol><li>Click "Send":<br><ul><li>On the \u201cHome\u201d page, Under the token balance, you\'ll find a "Send" button. Click on it.<br></li></ul></li><li>Enter Recipient Address:<br><ul><li>In the "Recipient Address" field, input the wallet address to which you want to send the tokens. Double-check the address to ensure it\'s accurate.<br></li><li>or you may scan QR Code from your recipient<br></li></ul></li><li>Specify Amount:<br><ul><li>In the "Amount" field, enter the quantity of tokens you wish to send.<br></li></ul></li><li>Confirm and Send:<br><ul><li>Review the transaction details, including the recipient address, amount, and gas fee.<br></li><li>If everything looks correct, click the "Next" or "Confirm" button<br></li><li>Nano Wallet will prompt you to confirm the transaction.<br></li></ul></li><li>Wait for Confirmation:<br><ul><li>The transaction will now be broadcast to the network<br></li><li>Once the transaction is confirmed by miners, you\'ll see a notification indicating that it was successful.<br></li></ul></li><li>Transaction History:<br><ul><li>You can also view the transaction in the \u201cToken Detail\u201d or "Transaction History" tab of Nano Wallet to confirm its completion.</li></ul></li></ol><div data-cke-filler-webkit="end" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;">&nbsp;</div><p class="" style=""><br></p>'
                  },
                  {
                    Title: "How to receive tokens?",
                    Description:
                      '<p><p class="" style=""><p class="" style=""><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;"></div></p></p></p><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;"></div><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;">&nbsp;</div><ol><li>Share Your Wallet Address: To receive tokens, you need to share your cryptocurrency wallet address or your QR Code with the person that wants to send you tokens.</li><li>Wait for the Transfer: Once someone sends tokens to your wallet address, you don\'t need to do anything else. Just wait for the transfer to be processed on the blockchain</li><li>Check Your Balance: After the transfer is confirmed, you can check your wallet balance to see the tokens you\'ve received. Use your wallet application or platform to view your updated balance.</li><li>Manage Your Tokens: You can now use, hold, or manage the received tokens as you see fit. You can also send them to other</li></ol><p>Remember to always share your correct wallet address, as cryptocurrency transactions are irreversible, and sending tokens to the wrong address can result in permanent loss.</p><p class="" style=""><br></p>'
                  },
                  {
                    Title: "What do I do if I lose my PIN?",
                    Description:
                      '<p><p class="" style=""><p class="" style=""><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;"></div></p></p></p><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;"></div><meta charset="utf-8"><div data-cke-filler-webkit="start" data-cke-temp="1" style="display: block; width: 0px; height: 0px; padding: 0px; border: 0px; margin: 0px; position: absolute; top: 0px; left: -9999px; opacity: 0; overflow: hidden;"></div><meta charset="utf-8"><p>We regret to inform you that we are unable to assist with PIN recovery for your wallet if it has been forgotten. We do not have access to either your wallet or your PIN. If you encounter an error while attempting to log in due to an incorrect PIN, we can provide you with the following two options:<br></p><ol><li>Attempt logging in using all potential password combinations you might have used</li><li>Sign out of your wallet and re-login by entering your Secret Wallet Recovery Phrase (Import your wallet) and make a new PIN</li></ol><p>Before you start the second step, make sure you have your Secret Recovery Phrase ready. If you don\'t, you might not be able to access your previous wallet. Please take note that performing a wallet reset will not recover any accounts (addresses) that were not originally generated from your recovery phrase. Any accounts that were covered by the Secret Recovery Phrase and must be manually re-added.</p><p class="" style=""><br></p>'
                  }
                ]}
                name={"FAQ"}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pB5M)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.FAQ;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7EbNu
                            )}
                            key={currentIndex}
                          >
                            {(() => {
                              const child$Props = {
                                bordered: true,
                                className: classNames(
                                  "__wab_instance",
                                  sty.collapse
                                ),
                                defaultOpen: true,
                                label2: (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.FAQ[currentIndex].Title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Collapse Header";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ),
                                onChange:
                                  p.generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "open",
                                    ["collapse", __plasmic_idx_0, "open"],
                                    AntdSingleCollapse_Helpers
                                  ),
                                open: p.generateStateValueProp($state, [
                                  "collapse",
                                  __plasmic_idx_0,
                                  "open"
                                ]),
                                showArrow: true
                              };
                              p.initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "collapse[].open"
                                  }
                                ],
                                [__plasmic_idx_0],
                                AntdSingleCollapse_Helpers ?? {},
                                child$Props
                              );
                              p.initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "collapse[].open",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      true
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <AntdSingleCollapse
                                  data-plasmic-name={"collapse"}
                                  data-plasmic-override={overrides.collapse}
                                  {...child$Props}
                                >
                                  <Embed
                                    data-plasmic-name={"embedHtml"}
                                    data-plasmic-override={overrides.embedHtml}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.embedHtml
                                    )}
                                    code={(() => {
                                      try {
                                        return currentItem.Description;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </AntdSingleCollapse>
                              );
                            })()}
                          </div>
                        );
                      })}
                    </div>
                  )}
                </ph.DataCtxReader>
              </DataProvider>
            </div>
          </section>
          <CtaBanner
            data-plasmic-name={"ctaBanner"}
            data-plasmic-override={overrides.ctaBanner}
            className={classNames("__wab_instance", sty.ctaBanner)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBarNano",
    "sectionPrivatekey",
    "h1",
    "dataProvider",
    "collapse",
    "embedHtml",
    "ctaBanner",
    "footer"
  ],
  navBarNano: ["navBarNano"],
  sectionPrivatekey: [
    "sectionPrivatekey",
    "h1",
    "dataProvider",
    "collapse",
    "embedHtml"
  ],
  h1: ["h1"],
  dataProvider: ["dataProvider", "collapse", "embedHtml"],
  collapse: ["collapse", "embedHtml"],
  embedHtml: ["embedHtml"],
  ctaBanner: ["ctaBanner"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBarNano: typeof NavBarNano;
  sectionPrivatekey: "section";
  h1: "h1";
  dataProvider: typeof DataProvider;
  collapse: typeof AntdSingleCollapse;
  embedHtml: typeof Embed;
  ctaBanner: typeof CtaBanner;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHelp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHelp__VariantsArgs;
    args?: PlasmicHelp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHelp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHelp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHelp__ArgProps,
          internalVariantPropNames: PlasmicHelp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHelp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHelp";
  } else {
    func.displayName = `PlasmicHelp.${nodeName}`;
  }
  return func;
}

export const PlasmicHelp = Object.assign(
  // Top-level PlasmicHelp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBarNano: makeNodeComponent("navBarNano"),
    sectionPrivatekey: makeNodeComponent("sectionPrivatekey"),
    h1: makeNodeComponent("h1"),
    dataProvider: makeNodeComponent("dataProvider"),
    collapse: makeNodeComponent("collapse"),
    embedHtml: makeNodeComponent("embedHtml"),
    ctaBanner: makeNodeComponent("ctaBanner"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHelp
    internalVariantProps: PlasmicHelp__VariantProps,
    internalArgProps: PlasmicHelp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHelp;
/* prettier-ignore-end */
